macro_rules! opcode {
    ($tr:ident, $t1:ident, $t2:ident, $m:expr, $code:expr, $name:ident, $text:expr) => {
        pub const $name: u8 = $code;
    }
}


/*
 *   tr: result type
 *   t1: type of the 1st parameter
 *   t2: type of the 2nd parameter
 *    m: memory size of the operation, if any
 * code: opcode
 * NAME: used to generate the opcode enum
 * text: a string of the opcode name in the AST format
 *
 *  tr  t1    t2   m  code  NAME text
 *  ============================ */
 
  opcode!(___, ___, ___, 0, 0x00, UNREACHABLE, "unreachable")                 ;
  opcode!(___, ___, ___, 0, 0x01, NOP, "nop")                                 ;
  opcode!(___, ___, ___, 0, 0x02, BLOCK, "block")                             ;
  opcode!(___, ___, ___, 0, 0x03, LOOP, "loop")                               ;
  opcode!(___, ___, ___, 0, 0x04, IF, "if")                                   ;
  opcode!(___, ___, ___, 0, 0x05, ELSE, "else")                               ;
  opcode!(___, ___, ___, 0, 0x0b, END, "end")                                 ;
  opcode!(___, ___, ___, 0, 0x0c, BR, "br")                                   ;
  opcode!(___, ___, ___, 0, 0x0d, BR_IF, "br_if")                             ;
  opcode!(___, ___, ___, 0, 0x0e, BR_TABLE, "br_table")                       ;
  opcode!(___, ___, ___, 0, 0x0f, RETURN, "return")                           ;
  opcode!(___, ___, ___, 0, 0x10, CALL, "call")                               ;
  opcode!(___, ___, ___, 0, 0x11, CALL_INDIRECT, "call_indirect")             ;
  opcode!(___, ___, ___, 0, 0x1a, DROP, "drop")                               ;
  opcode!(___, ___, ___, 0, 0x1b, SELECT, "select")                           ;
  opcode!(___, ___, ___, 0, 0x20, GET_LOCAL, "get_local")                     ;
  opcode!(___, ___, ___, 0, 0x21, SET_LOCAL, "set_local")                     ;
  opcode!(___, ___, ___, 0, 0x22, TEE_LOCAL, "tee_local")                     ;
  opcode!(___, ___, ___, 0, 0x23, GET_GLOBAL, "get_global")                   ;
  opcode!(___, ___, ___, 0, 0x24, SET_GLOBAL, "set_global")                   ;
  opcode!(I32, I32, ___, 4, 0x28, I32_LOAD, "i32.load")                       ;
  opcode!(I64, I32, ___, 8, 0x29, I64_LOAD, "i64.load")                       ;
  opcode!(F32, I32, ___, 4, 0x2a, F32_LOAD, "f32.load")                       ;
  opcode!(F64, I32, ___, 8, 0x2b, F64_LOAD, "f64.load")                       ;
  opcode!(I32, I32, ___, 1, 0x2c, I32_LOAD8_S, "i32.load8_s")                 ;
  opcode!(I32, I32, ___, 1, 0x2d, I32_LOAD8_U, "i32.load8_u")                 ;
  opcode!(I32, I32, ___, 2, 0x2e, I32_LOAD16_S, "i32.load16_s")               ;
  opcode!(I32, I32, ___, 2, 0x2f, I32_LOAD16_U, "i32.load16_u")               ;
  opcode!(I64, I32, ___, 1, 0x30, I64_LOAD8_S, "i64.load8_s")                 ;
  opcode!(I64, I32, ___, 1, 0x31, I64_LOAD8_U, "i64.load8_u")                 ;
  opcode!(I64, I32, ___, 2, 0x32, I64_LOAD16_S, "i64.load16_s")               ;
  opcode!(I64, I32, ___, 2, 0x33, I64_LOAD16_U, "i64.load16_u")               ;
  opcode!(I64, I32, ___, 4, 0x34, I64_LOAD32_S, "i64.load32_s")               ;
  opcode!(I64, I32, ___, 4, 0x35, I64_LOAD32_U, "i64.load32_u")               ;
  opcode!(___, I32, I32, 4, 0x36, I32_STORE, "i32.store")                     ;
  opcode!(___, I32, I64, 8, 0x37, I64_STORE, "i64.store")                     ;
  opcode!(___, I32, F32, 4, 0x38, F32_STORE, "f32.store")                     ;
  opcode!(___, I32, F64, 8, 0x39, F64_STORE, "f64.store")                     ;
  opcode!(___, I32, I32, 1, 0x3a, I32_STORE8, "i32.store8")                   ;
  opcode!(___, I32, I32, 2, 0x3b, I32_STORE16, "i32.store16")                 ;
  opcode!(___, I32, I64, 1, 0x3c, I64_STORE8, "i64.store8")                   ;
  opcode!(___, I32, I64, 2, 0x3d, I64_STORE16, "i64.store16")                 ;
  opcode!(___, I32, I64, 4, 0x3e, I64_STORE32, "i64.store32")                 ;
  opcode!(I32, ___, ___, 0, 0x3f, CURRENT_MEMORY, "current_memory")           ;
  opcode!(I32, I32, ___, 0, 0x40, GROW_MEMORY, "grow_memory")                 ;
  opcode!(I32, ___, ___, 0, 0x41, I32_CONST, "i32.const")                     ;
  opcode!(I64, ___, ___, 0, 0x42, I64_CONST, "i64.const")                     ;
  opcode!(F32, ___, ___, 0, 0x43, F32_CONST, "f32.const")                     ;
  opcode!(F64, ___, ___, 0, 0x44, F64_CONST, "f64.const")                     ;
  opcode!(I32, I32, ___, 0, 0x45, I32_EQZ, "i32.eqz")                         ;
  opcode!(I32, I32, I32, 0, 0x46, I32_EQ, "i32.eq")                           ;
  opcode!(I32, I32, I32, 0, 0x47, I32_NE, "i32.ne")                           ;
  opcode!(I32, I32, I32, 0, 0x48, I32_LT_S, "i32.lt_s")                       ;
  opcode!(I32, I32, I32, 0, 0x49, I32_LT_U, "i32.lt_u")                       ;
  opcode!(I32, I32, I32, 0, 0x4a, I32_GT_S, "i32.gt_s")                       ;
  opcode!(I32, I32, I32, 0, 0x4b, I32_GT_U, "i32.gt_u")                       ;
  opcode!(I32, I32, I32, 0, 0x4c, I32_LE_S, "i32.le_s")                       ;
  opcode!(I32, I32, I32, 0, 0x4d, I32_LE_U, "i32.le_u")                       ;
  opcode!(I32, I32, I32, 0, 0x4e, I32_GE_S, "i32.ge_s")                       ;
  opcode!(I32, I32, I32, 0, 0x4f, I32_GE_U, "i32.ge_u")                       ;
  opcode!(I32, I64, ___, 0, 0x50, I64_EQZ, "i64.eqz")                         ;
  opcode!(I32, I64, I64, 0, 0x51, I64_EQ, "i64.eq")                           ;
  opcode!(I32, I64, I64, 0, 0x52, I64_NE, "i64.ne")                           ;
  opcode!(I32, I64, I64, 0, 0x53, I64_LT_S, "i64.lt_s")                       ;
  opcode!(I32, I64, I64, 0, 0x54, I64_LT_U, "i64.lt_u")                       ;
  opcode!(I32, I64, I64, 0, 0x55, I64_GT_S, "i64.gt_s")                       ;
  opcode!(I32, I64, I64, 0, 0x56, I64_GT_U, "i64.gt_u")                       ;
  opcode!(I32, I64, I64, 0, 0x57, I64_LE_S, "i64.le_s")                       ;
  opcode!(I32, I64, I64, 0, 0x58, I64_LE_U, "i64.le_u")                       ;
  opcode!(I32, I64, I64, 0, 0x59, I64_GE_S, "i64.ge_s")                       ;
  opcode!(I32, I64, I64, 0, 0x5a, I64_GE_U, "i64.ge_u")                       ;
  opcode!(I32, F32, F32, 0, 0x5b, F32_EQ, "f32.eq")                           ;
  opcode!(I32, F32, F32, 0, 0x5c, F32_NE, "f32.ne")                           ;
  opcode!(I32, F32, F32, 0, 0x5d, F32_LT, "f32.lt")                           ;
  opcode!(I32, F32, F32, 0, 0x5e, F32_GT, "f32.gt")                           ;
  opcode!(I32, F32, F32, 0, 0x5f, F32_LE, "f32.le")                           ;
  opcode!(I32, F32, F32, 0, 0x60, F32_GE, "f32.ge")                           ;
  opcode!(I32, F64, F64, 0, 0x61, F64_EQ, "f64.eq")                           ;
  opcode!(I32, F64, F64, 0, 0x62, F64_NE, "f64.ne")                           ;
  opcode!(I32, F64, F64, 0, 0x63, F64_LT, "f64.lt")                           ;
  opcode!(I32, F64, F64, 0, 0x64, F64_GT, "f64.gt")                           ;
  opcode!(I32, F64, F64, 0, 0x65, F64_LE, "f64.le")                           ;
  opcode!(I32, F64, F64, 0, 0x66, F64_GE, "f64.ge")                           ;
  opcode!(I32, I32, ___, 0, 0x67, I32_CLZ, "i32.clz")                         ;
  opcode!(I32, I32, ___, 0, 0x68, I32_CTZ, "i32.ctz")                         ;
  opcode!(I32, I32, ___, 0, 0x69, I32_POPCNT, "i32.popcnt")                   ;
  opcode!(I32, I32, I32, 0, 0x6a, I32_ADD, "i32.add")                         ;
  opcode!(I32, I32, I32, 0, 0x6b, I32_SUB, "i32.sub")                         ;
  opcode!(I32, I32, I32, 0, 0x6c, I32_MUL, "i32.mul")                         ;
  opcode!(I32, I32, I32, 0, 0x6d, I32_DIV_S, "i32.div_s")                     ;
  opcode!(I32, I32, I32, 0, 0x6e, I32_DIV_U, "i32.div_u")                     ;
  opcode!(I32, I32, I32, 0, 0x6f, I32_REM_S, "i32.rem_s")                     ;
  opcode!(I32, I32, I32, 0, 0x70, I32_REM_U, "i32.rem_u")                     ;
  opcode!(I32, I32, I32, 0, 0x71, I32_AND, "i32.and")                         ;
  opcode!(I32, I32, I32, 0, 0x72, I32_OR, "i32.or")                           ;
  opcode!(I32, I32, I32, 0, 0x73, I32_XOR, "i32.xor")                         ;
  opcode!(I32, I32, I32, 0, 0x74, I32_SHL, "i32.shl")                         ;
  opcode!(I32, I32, I32, 0, 0x75, I32_SHR_S, "i32.shr_s")                     ;
  opcode!(I32, I32, I32, 0, 0x76, I32_SHR_U, "i32.shr_u")                     ;
  opcode!(I32, I32, I32, 0, 0x77, I32_ROTL, "i32.rotl")                       ;
  opcode!(I32, I32, I32, 0, 0x78, I32_ROTR, "i32.rotr")                       ;
  opcode!(I64, I64, I64, 0, 0x79, I64_CLZ, "i64.clz")                         ;
  opcode!(I64, I64, I64, 0, 0x7a, I64_CTZ, "i64.ctz")                         ;
  opcode!(I64, I64, I64, 0, 0x7b, I64_POPCNT, "i64.popcnt")                   ;
  opcode!(I64, I64, I64, 0, 0x7c, I64_ADD, "i64.add")                         ;
  opcode!(I64, I64, I64, 0, 0x7d, I64_SUB, "i64.sub")                         ;
  opcode!(I64, I64, I64, 0, 0x7e, I64_MUL, "i64.mul")                         ;
  opcode!(I64, I64, I64, 0, 0x7f, I64_DIV_S, "i64.div_s")                     ;
  opcode!(I64, I64, I64, 0, 0x80, I64_DIV_U, "i64.div_u")                     ;
  opcode!(I64, I64, I64, 0, 0x81, I64_REM_S, "i64.rem_s")                     ;
  opcode!(I64, I64, I64, 0, 0x82, I64_REM_U, "i64.rem_u")                     ;
  opcode!(I64, I64, I64, 0, 0x83, I64_AND, "i64.and")                         ;
  opcode!(I64, I64, I64, 0, 0x84, I64_OR, "i64.or")                           ;
  opcode!(I64, I64, I64, 0, 0x85, I64_XOR, "i64.xor")                         ;
  opcode!(I64, I64, I64, 0, 0x86, I64_SHL, "i64.shl")                         ;
  opcode!(I64, I64, I64, 0, 0x87, I64_SHR_S, "i64.shr_s")                     ;
  opcode!(I64, I64, I64, 0, 0x88, I64_SHR_U, "i64.shr_u")                     ;
  opcode!(I64, I64, I64, 0, 0x89, I64_ROTL, "i64.rotl")                       ;
  opcode!(I64, I64, I64, 0, 0x8a, I64_ROTR, "i64.rotr")                       ;
  opcode!(F32, F32, F32, 0, 0x8b, F32_ABS, "f32.abs")                         ;
  opcode!(F32, F32, F32, 0, 0x8c, F32_NEG, "f32.neg")                         ;
  opcode!(F32, F32, F32, 0, 0x8d, F32_CEIL, "f32.ceil")                       ;
  opcode!(F32, F32, F32, 0, 0x8e, F32_FLOOR, "f32.floor")                     ;
  opcode!(F32, F32, F32, 0, 0x8f, F32_TRUNC, "f32.trunc")                     ;
  opcode!(F32, F32, F32, 0, 0x90, F32_NEAREST, "f32.nearest")                 ;
  opcode!(F32, F32, F32, 0, 0x91, F32_SQRT, "f32.sqrt")                       ;
  opcode!(F32, F32, F32, 0, 0x92, F32_ADD, "f32.add")                         ;
  opcode!(F32, F32, F32, 0, 0x93, F32_SUB, "f32.sub")                         ;
  opcode!(F32, F32, F32, 0, 0x94, F32_MUL, "f32.mul")                         ;
  opcode!(F32, F32, F32, 0, 0x95, F32_DIV, "f32.div")                         ;
  opcode!(F32, F32, F32, 0, 0x96, F32_MIN, "f32.min")                         ;
  opcode!(F32, F32, F32, 0, 0x97, F32_MAX, "f32.max")                         ;
  opcode!(F32, F32, F32, 0, 0x98, F32_COPYSIGN, "f32.copysign")               ;
  opcode!(F64, F64, F64, 0, 0x99, F64_ABS, "f64.abs")                         ;
  opcode!(F64, F64, F64, 0, 0x9a, F64_NEG, "f64.neg")                         ;
  opcode!(F64, F64, F64, 0, 0x9b, F64_CEIL, "f64.ceil")                       ;
  opcode!(F64, F64, F64, 0, 0x9c, F64_FLOOR, "f64.floor")                     ;
  opcode!(F64, F64, F64, 0, 0x9d, F64_TRUNC, "f64.trunc")                     ;
  opcode!(F64, F64, F64, 0, 0x9e, F64_NEAREST, "f64.nearest")                 ;
  opcode!(F64, F64, F64, 0, 0x9f, F64_SQRT, "f64.sqrt")                       ;
  opcode!(F64, F64, F64, 0, 0xa0, F64_ADD, "f64.add")                         ;
  opcode!(F64, F64, F64, 0, 0xa1, F64_SUB, "f64.sub")                         ;
  opcode!(F64, F64, F64, 0, 0xa2, F64_MUL, "f64.mul")                         ;
  opcode!(F64, F64, F64, 0, 0xa3, F64_DIV, "f64.div")                         ;
  opcode!(F64, F64, F64, 0, 0xa4, F64_MIN, "f64.min")                         ;
  opcode!(F64, F64, F64, 0, 0xa5, F64_MAX, "f64.max")                         ;
  opcode!(F64, F64, F64, 0, 0xa6, F64_COPYSIGN, "f64.copysign")               ;
  opcode!(I32, I64, ___, 0, 0xa7, I32_WRAP_I64, "i32.wrap/i64")               ;
  opcode!(I32, F32, ___, 0, 0xa8, I32_TRUNC_S_F32, "i32.trunc_s/f32")         ;
  opcode!(I32, F32, ___, 0, 0xa9, I32_TRUNC_U_F32, "i32.trunc_u/f32")         ;
  opcode!(I32, F64, ___, 0, 0xaa, I32_TRUNC_S_F64, "i32.trunc_s/f64")         ;
  opcode!(I32, F64, ___, 0, 0xab, I32_TRUNC_U_F64, "i32.trunc_u/f64")         ;
  opcode!(I64, I32, ___, 0, 0xac, I64_EXTEND_S_I32, "i64.extend_s/i32")       ;
  opcode!(I64, I32, ___, 0, 0xad, I64_EXTEND_U_I32, "i64.extend_u/i32")       ;
  opcode!(I64, F32, ___, 0, 0xae, I64_TRUNC_S_F32, "i64.trunc_s/f32")         ;
  opcode!(I64, F32, ___, 0, 0xaf, I64_TRUNC_U_F32, "i64.trunc_u/f32")         ;
  opcode!(I64, F64, ___, 0, 0xb0, I64_TRUNC_S_F64, "i64.trunc_s/f64")         ;
  opcode!(I64, F64, ___, 0, 0xb1, I64_TRUNC_U_F64, "i64.trunc_u/f64")         ;
  opcode!(F32, I32, ___, 0, 0xb2, F32_CONVERT_S_I32, "f32.convert_s/i32")     ;
  opcode!(F32, I32, ___, 0, 0xb3, F32_CONVERT_U_I32, "f32.convert_u/i32")     ;
  opcode!(F32, I64, ___, 0, 0xb4, F32_CONVERT_S_I64, "f32.convert_s/i64")     ;
  opcode!(F32, I64, ___, 0, 0xb5, F32_CONVERT_U_I64, "f32.convert_u/i64")     ;
  opcode!(F32, F64, ___, 0, 0xb6, F32_DEMOTE_F64, "f32.demote/f64")           ;
  opcode!(F64, I32, ___, 0, 0xb7, F64_CONVERT_S_I32, "f64.convert_s/i32")     ;
  opcode!(F64, I32, ___, 0, 0xb8, F64_CONVERT_U_I32, "f64.convert_u/i32")     ;
  opcode!(F64, I64, ___, 0, 0xb9, F64_CONVERT_S_I64, "f64.convert_s/i64")     ;
  opcode!(F64, I64, ___, 0, 0xba, F64_CONVERT_U_I64, "f64.convert_u/i64")     ;
  opcode!(F64, F32, ___, 0, 0xbb, F64_PROMOTE_F32, "f64.promote/f32")         ;
  opcode!(I32, F32, ___, 0, 0xbc, I32_REINTERPRET_F32, "i32.reinterpret/f32") ;
  opcode!(I64, F64, ___, 0, 0xbd, I64_REINTERPRET_F64, "i64.reinterpret/f64") ;
  opcode!(F32, I32, ___, 0, 0xbe, F32_REINTERPRET_I32, "f32.reinterpret/i32") ;
  opcode!(F64, I64, ___, 0, 0xbf, F64_REINTERPRET_I64, "f64.reinterpret/i64") ;