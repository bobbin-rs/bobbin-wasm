{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[14512934327055696550,16933540259674525252]},"crate_root":"/Users/jcsoo/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.0.0/src","external_crates":[{"file_name":"/Users/jcsoo/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.0.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17891038118358416307,13795871019518284756]}}],"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":27762,"line_start":1,"line_end":819,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":27762,"line_start":1,"line_end":819,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/jcsoo/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":114},{"krate":0,"index":142},{"krate":0,"index":140},{"krate":0,"index":136},{"krate":0,"index":132},{"krate":0,"index":128},{"krate":0,"index":124},{"krate":0,"index":120},{"krate":0,"index":116},{"krate":0,"index":62},{"krate":0,"index":146},{"krate":0,"index":174},{"krate":0,"index":172},{"krate":0,"index":168},{"krate":0,"index":164},{"krate":0,"index":160},{"krate":0,"index":156},{"krate":0,"index":152},{"krate":0,"index":148},{"krate":0,"index":66},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":96}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1201,"byte_end":1223,"line_start":39,"line_end":39,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1258,"byte_end":1265,"line_start":40,"line_end":40,"column_start":35,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":20},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3042,"byte_end":3051,"line_start":119,"line_end":119,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60}],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3239,"byte_end":3247,"line_start":124,"line_end":124,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"fn (buf: &[u8]) -> u16","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3374,"byte_end":3382,"line_start":129,"line_end":129,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3509,"byte_end":3517,"line_start":134,"line_end":134,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3689,"byte_end":3698,"line_start":140,"line_end":140,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"fn (buf: &[u8], nbytes: usize) -> u64","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3843,"byte_end":3852,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"fn (buf: &mut [u8], n: u16) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3987,"byte_end":3996,"line_start":150,"line_end":150,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4131,"byte_end":4140,"line_start":155,"line_end":155,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4358,"byte_end":4368,"line_start":161,"line_end":161,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"fn (buf: &mut [u8], n: u64, nbytes: usize) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4526,"byte_end":4534,"line_start":167,"line_end":167,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"fn (buf: &[u8]) -> i16","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4714,"byte_end":4722,"line_start":175,"line_end":175,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4902,"byte_end":4910,"line_start":183,"line_end":183,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5135,"byte_end":5143,"line_start":192,"line_end":192,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"fn (buf: &[u8], nbytes: usize) -> i64","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5385,"byte_end":5393,"line_start":200,"line_end":200,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"fn (buf: &[u8]) -> f32","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5612,"byte_end":5620,"line_start":208,"line_end":208,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"fn (buf: &[u8]) -> f64","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5818,"byte_end":5827,"line_start":216,"line_end":216,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"fn (buf: &mut [u8], n: i16) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6019,"byte_end":6028,"line_start":224,"line_end":224,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6220,"byte_end":6229,"line_start":232,"line_end":232,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6504,"byte_end":6513,"line_start":241,"line_end":241,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"fn (buf: &mut [u8], n: i64, nbytes: usize) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6767,"byte_end":6776,"line_start":249,"line_end":249,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"fn (buf: &mut [u8], n: f32) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7005,"byte_end":7014,"line_start":257,"line_end":257,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"fn (buf: &mut [u8], n: f64) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":114},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7314,"byte_end":7323,"line_start":267,"line_end":267,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"BigEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7305,"byte_end":7326,"line_start":267,"line_end":267,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7305,"byte_end":7326,"line_start":267,"line_end":267,"column_start":1,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":146},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7634,"byte_end":7646,"line_start":280,"line_end":280,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"LittleEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7625,"byte_end":7649,"line_start":280,"line_end":280,"column_start":1,"column_end":25}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7625,"byte_end":7649,"line_start":280,"line_end":280,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":70},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8122,"byte_end":8135,"line_start":298,"line_end":298,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":72},"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8335,"byte_end":8347,"line_start":305,"line_end":305,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8293,"byte_end":8325,"line_start":304,"line_end":304,"column_start":1,"column_end":33}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3058,"byte_end":3063,"line_start":120,"line_end":120,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2444},"to":{"krate":0,"index":20}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3066,"byte_end":3070,"line_start":120,"line_end":120,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":1708},"to":{"krate":0,"index":20}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3073,"byte_end":3078,"line_start":120,"line_end":120,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":7240},"to":{"krate":0,"index":20}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3081,"byte_end":3088,"line_start":120,"line_end":120,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2456},"to":{"krate":0,"index":20}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3091,"byte_end":3093,"line_start":120,"line_end":120,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2262},"to":{"krate":0,"index":20}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3096,"byte_end":3100,"line_start":120,"line_end":120,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":6816},"to":{"krate":0,"index":20}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3103,"byte_end":3106,"line_start":120,"line_end":120,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":2292},"to":{"krate":0,"index":20}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3109,"byte_end":3118,"line_start":120,"line_end":120,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":1,"index":2256},"to":{"krate":0,"index":20}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3121,"byte_end":3131,"line_start":120,"line_end":120,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":1,"index":2310},"to":{"krate":0,"index":20}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7345,"byte_end":7354,"line_start":269,"line_end":269,"column_start":18,"column_end":27},"kind":"Impl","from":{"krate":0,"index":114},"to":{"krate":1,"index":2456}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7668,"byte_end":7680,"line_start":282,"line_end":282,"column_start":18,"column_end":30},"kind":"Impl","from":{"krate":0,"index":146},"to":{"krate":1,"index":2456}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9386,"byte_end":9395,"line_start":340,"line_end":340,"column_start":20,"column_end":29},"kind":"Impl","from":{"krate":0,"index":114},"to":{"krate":0,"index":20}},{"span":{"file_name":[47,85,115,101,114,115,47,106,99,115,111,111,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10873,"byte_end":10885,"line_start":397,"line_end":397,"column_start":20,"column_end":32},"kind":"Impl","from":{"krate":0,"index":146},"to":{"krate":0,"index":20}}]}