use parser::types::ValueType;

pub const BR_TABLE_ENTRY_SIZE: u32 = 12;

#[derive(Debug)]
pub struct Op {
    pub tr: ValueType,
    pub t1: ValueType,
    pub t2: ValueType,
    pub m: u8,
    pub code: u8,
    pub text: &'static str,
}

pub const ___: ValueType = ValueType::Void;
pub const I32: ValueType = ValueType::I32;
pub const I64: ValueType = ValueType::I64;
pub const F32: ValueType = ValueType::F32;
pub const F64: ValueType = ValueType::F64;
pub const VOID: ValueType = ValueType::Void;

pub const UNREACHABLE             : u8 = 0x00;
pub const NOP                     : u8 = 0x01;
pub const BLOCK                   : u8 = 0x02;
pub const LOOP                    : u8 = 0x03;
pub const IF                      : u8 = 0x04;
pub const ELSE                    : u8 = 0x05;
pub const TRY                     : u8 = 0x06;
pub const CATCH                   : u8 = 0x07;
pub const THROW                   : u8 = 0x08;
pub const RETHROW                 : u8 = 0x09;
pub const CATCH_ALL               : u8 = 0x0a;
pub const END                     : u8 = 0x0b;
pub const BR                      : u8 = 0x0c;
pub const BR_IF                   : u8 = 0x0d;
pub const BR_TABLE                : u8 = 0x0e;
pub const RETURN                  : u8 = 0x0f;
pub const CALL                    : u8 = 0x10;
pub const CALL_INDIRECT           : u8 = 0x11;
pub const DROP                    : u8 = 0x1a;
pub const SELECT                  : u8 = 0x1b;
pub const GET_LOCAL               : u8 = 0x20;
pub const SET_LOCAL               : u8 = 0x21;
pub const TEE_LOCAL               : u8 = 0x22;
pub const GET_GLOBAL              : u8 = 0x23;
pub const SET_GLOBAL              : u8 = 0x24;
pub const I32_LOAD                : u8 = 0x28;
pub const I64_LOAD                : u8 = 0x29;
pub const F32_LOAD                : u8 = 0x2a;
pub const F64_LOAD                : u8 = 0x2b;
pub const I32_LOAD8_S             : u8 = 0x2c;
pub const I32_LOAD8_U             : u8 = 0x2d;
pub const I32_LOAD16_S            : u8 = 0x2e;
pub const I32_LOAD16_U            : u8 = 0x2f;
pub const I64_LOAD8_S             : u8 = 0x30;
pub const I64_LOAD8_U             : u8 = 0x31;
pub const I64_LOAD16_S            : u8 = 0x32;
pub const I64_LOAD16_U            : u8 = 0x33;
pub const I64_LOAD32_S            : u8 = 0x34;
pub const I64_LOAD32_U            : u8 = 0x35;
pub const I32_STORE               : u8 = 0x36;
pub const I64_STORE               : u8 = 0x37;
pub const F32_STORE               : u8 = 0x38;
pub const F64_STORE               : u8 = 0x39;
pub const I32_STORE8              : u8 = 0x3a;
pub const I32_STORE16             : u8 = 0x3b;
pub const I64_STORE8              : u8 = 0x3c;
pub const I64_STORE16             : u8 = 0x3d;
pub const I64_STORE32             : u8 = 0x3e;
pub const MEM_SIZE                : u8 = 0x3f;
pub const MEM_GROW                : u8 = 0x40;
pub const I32_CONST               : u8 = 0x41;
pub const I64_CONST               : u8 = 0x42;
pub const F32_CONST               : u8 = 0x43;
pub const F64_CONST               : u8 = 0x44;
pub const I32_EQZ                 : u8 = 0x45;
pub const I32_EQ                  : u8 = 0x46;
pub const I32_NE                  : u8 = 0x47;
pub const I32_LT_S                : u8 = 0x48;
pub const I32_LT_U                : u8 = 0x49;
pub const I32_GT_S                : u8 = 0x4a;
pub const I32_GT_U                : u8 = 0x4b;
pub const I32_LE_S                : u8 = 0x4c;
pub const I32_LE_U                : u8 = 0x4d;
pub const I32_GE_S                : u8 = 0x4e;
pub const I32_GE_U                : u8 = 0x4f;
pub const I64_EQZ                 : u8 = 0x50;
pub const I64_EQ                  : u8 = 0x51;
pub const I64_NE                  : u8 = 0x52;
pub const I64_LT_S                : u8 = 0x53;
pub const I64_LT_U                : u8 = 0x54;
pub const I64_GT_S                : u8 = 0x55;
pub const I64_GT_U                : u8 = 0x56;
pub const I64_LE_S                : u8 = 0x57;
pub const I64_LE_U                : u8 = 0x58;
pub const I64_GE_S                : u8 = 0x59;
pub const I64_GE_U                : u8 = 0x5a;
pub const F32_EQ                  : u8 = 0x5b;
pub const F32_NE                  : u8 = 0x5c;
pub const F32_LT                  : u8 = 0x5d;
pub const F32_GT                  : u8 = 0x5e;
pub const F32_LE                  : u8 = 0x5f;
pub const F32_GE                  : u8 = 0x60;
pub const F64_EQ                  : u8 = 0x61;
pub const F64_NE                  : u8 = 0x62;
pub const F64_LT                  : u8 = 0x63;
pub const F64_GT                  : u8 = 0x64;
pub const F64_LE                  : u8 = 0x65;
pub const F64_GE                  : u8 = 0x66;
pub const I32_CLZ                 : u8 = 0x67;
pub const I32_CTZ                 : u8 = 0x68;
pub const I32_POPCNT              : u8 = 0x69;
pub const I32_ADD                 : u8 = 0x6a;
pub const I32_SUB                 : u8 = 0x6b;
pub const I32_MUL                 : u8 = 0x6c;
pub const I32_DIV_S               : u8 = 0x6d;
pub const I32_DIV_U               : u8 = 0x6e;
pub const I32_REM_S               : u8 = 0x6f;
pub const I32_REM_U               : u8 = 0x70;
pub const I32_AND                 : u8 = 0x71;
pub const I32_OR                  : u8 = 0x72;
pub const I32_XOR                 : u8 = 0x73;
pub const I32_SHL                 : u8 = 0x74;
pub const I32_SHR_S               : u8 = 0x75;
pub const I32_SHR_U               : u8 = 0x76;
pub const I32_ROTL                : u8 = 0x77;
pub const I32_ROTR                : u8 = 0x78;
pub const I64_CLZ                 : u8 = 0x79;
pub const I64_CTZ                 : u8 = 0x7a;
pub const I64_POPCNT              : u8 = 0x7b;
pub const I64_ADD                 : u8 = 0x7c;
pub const I64_SUB                 : u8 = 0x7d;
pub const I64_MUL                 : u8 = 0x7e;
pub const I64_DIV_S               : u8 = 0x7f;
pub const I64_DIV_U               : u8 = 0x80;
pub const I64_REM_S               : u8 = 0x81;
pub const I64_REM_U               : u8 = 0x82;
pub const I64_AND                 : u8 = 0x83;
pub const I64_OR                  : u8 = 0x84;
pub const I64_XOR                 : u8 = 0x85;
pub const I64_SHL                 : u8 = 0x86;
pub const I64_SHR_S               : u8 = 0x87;
pub const I64_SHR_U               : u8 = 0x88;
pub const I64_ROTL                : u8 = 0x89;
pub const I64_ROTR                : u8 = 0x8a;
pub const F32_ABS                 : u8 = 0x8b;
pub const F32_NEG                 : u8 = 0x8c;
pub const F32_CEIL                : u8 = 0x8d;
pub const F32_FLOOR               : u8 = 0x8e;
pub const F32_TRUNC               : u8 = 0x8f;
pub const F32_NEAREST             : u8 = 0x90;
pub const F32_SQRT                : u8 = 0x91;
pub const F32_ADD                 : u8 = 0x92;
pub const F32_SUB                 : u8 = 0x93;
pub const F32_MUL                 : u8 = 0x94;
pub const F32_DIV                 : u8 = 0x95;
pub const F32_MIN                 : u8 = 0x96;
pub const F32_MAX                 : u8 = 0x97;
pub const F32_COPYSIGN            : u8 = 0x98;
pub const F64_ABS                 : u8 = 0x99;
pub const F64_NEG                 : u8 = 0x9a;
pub const F64_CEIL                : u8 = 0x9b;
pub const F64_FLOOR               : u8 = 0x9c;
pub const F64_TRUNC               : u8 = 0x9d;
pub const F64_NEAREST             : u8 = 0x9e;
pub const F64_SQRT                : u8 = 0x9f;
pub const F64_ADD                 : u8 = 0xa0;
pub const F64_SUB                 : u8 = 0xa1;
pub const F64_MUL                 : u8 = 0xa2;
pub const F64_DIV                 : u8 = 0xa3;
pub const F64_MIN                 : u8 = 0xa4;
pub const F64_MAX                 : u8 = 0xa5;
pub const F64_COPYSIGN            : u8 = 0xa6;
pub const I32_WRAP_I64            : u8 = 0xa7;
pub const I32_TRUNC_S_F32         : u8 = 0xa8;
pub const I32_TRUNC_U_F32         : u8 = 0xa9;
pub const I32_TRUNC_S_F64         : u8 = 0xaa;
pub const I32_TRUNC_U_F64         : u8 = 0xab;
pub const I64_EXTEND_S_I32        : u8 = 0xac;
pub const I64_EXTEND_U_I32        : u8 = 0xad;
pub const I64_TRUNC_S_F32         : u8 = 0xae;
pub const I64_TRUNC_U_F32         : u8 = 0xaf;
pub const I64_TRUNC_S_F64         : u8 = 0xb0;
pub const I64_TRUNC_U_F64         : u8 = 0xb1;
pub const F32_CONVERT_S_I32       : u8 = 0xb2;
pub const F32_CONVERT_U_I32       : u8 = 0xb3;
pub const F32_CONVERT_S_I64       : u8 = 0xb4;
pub const F32_CONVERT_U_I64       : u8 = 0xb5;
pub const F32_DEMOTE_F64          : u8 = 0xb6;
pub const F64_CONVERT_S_I32       : u8 = 0xb7;
pub const F64_CONVERT_U_I32       : u8 = 0xb8;
pub const F64_CONVERT_S_I64       : u8 = 0xb9;
pub const F64_CONVERT_U_I64       : u8 = 0xba;
pub const F64_PROMOTE_F32         : u8 = 0xbb;
pub const I32_REINTERPRET_F32     : u8 = 0xbc;
pub const I64_REINTERPRET_F64     : u8 = 0xbd;
pub const F32_REINTERPRET_I32     : u8 = 0xbe;
pub const F64_REINTERPRET_I64     : u8 = 0xbf;
pub const I32_EXTEND8_S           : u8 = 0xC0;
pub const I32_EXTEND16_S          : u8 = 0xC1;
pub const I64_EXTEND8_S           : u8 = 0xC2;
pub const I64_EXTEND16_S          : u8 = 0xC3;
pub const I64_EXTEND32_S          : u8 = 0xC4;
pub const ALLOCA                  : u8 = 0xe0;
pub const BR_UNLESS               : u8 = 0xe1;
pub const CALL_HOST               : u8 = 0xe2;
pub const DATA                    : u8 = 0xe3;
pub const DROP_KEEP               : u8 = 0xe4;


pub const UNREACHABLE_OP          : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x00,  text: "unreachable", };
pub const NOP_OP                  : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x01,  text: "nop", };
pub const BLOCK_OP                : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x02,  text: "block", };
pub const LOOP_OP                 : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x03,  text: "loop", };
pub const IF_OP                   : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x04,  text: "if", };
pub const ELSE_OP                 : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x05,  text: "else", };
pub const TRY_OP                  : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x06,  text: "try", };
pub const CATCH_OP                : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x07,  text: "catch", };
pub const THROW_OP                : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x08,  text: "throw", };
pub const RETHROW_OP              : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x09,  text: "rethrow", };
pub const CATCH_ALL_OP            : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x0a,  text: "catch_all", };
pub const END_OP                  : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x0b,  text: "end", };
pub const BR_OP                   : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x0c,  text: "br", };
pub const BR_IF_OP                : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x0d,  text: "br_if", };
pub const BR_TABLE_OP             : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x0e,  text: "br_table", };
pub const RETURN_OP               : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x0f,  text: "return", };
pub const CALL_OP                 : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x10,  text: "call", };
pub const CALL_INDIRECT_OP        : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x11,  text: "call_indirect", };
pub const DROP_OP                 : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x1a,  text: "drop", };
pub const SELECT_OP               : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x1b,  text: "select", };
pub const GET_LOCAL_OP            : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x20,  text: "get_local", };
pub const SET_LOCAL_OP            : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x21,  text: "set_local", };
pub const TEE_LOCAL_OP            : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x22,  text: "tee_local", };
pub const GET_GLOBAL_OP           : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x23,  text: "get_global", };
pub const SET_GLOBAL_OP           : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0x24,  text: "set_global", };
pub const I32_LOAD_OP             : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 4,  code: 0x28,  text: "i32.load", };
pub const I64_LOAD_OP             : Op = Op { tr: I64,  t1: I32,  t2: ___,  m: 8,  code: 0x29,  text: "i64.load", };
pub const F32_LOAD_OP             : Op = Op { tr: F32,  t1: I32,  t2: ___,  m: 4,  code: 0x2a,  text: "f32.load", };
pub const F64_LOAD_OP             : Op = Op { tr: F64,  t1: I32,  t2: ___,  m: 8,  code: 0x2b,  text: "f64.load", };
pub const I32_LOAD8_S_OP          : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 1,  code: 0x2c,  text: "i32.load8_s", };
pub const I32_LOAD8_U_OP          : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 1,  code: 0x2d,  text: "i32.load8_u", };
pub const I32_LOAD16_S_OP         : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 2,  code: 0x2e,  text: "i32.load16_s", };
pub const I32_LOAD16_U_OP         : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 2,  code: 0x2f,  text: "i32.load16_u", };
pub const I64_LOAD8_S_OP          : Op = Op { tr: I64,  t1: I32,  t2: ___,  m: 1,  code: 0x30,  text: "i64.load8_s", };
pub const I64_LOAD8_U_OP          : Op = Op { tr: I64,  t1: I32,  t2: ___,  m: 1,  code: 0x31,  text: "i64.load8_u", };
pub const I64_LOAD16_S_OP         : Op = Op { tr: I64,  t1: I32,  t2: ___,  m: 2,  code: 0x32,  text: "i64.load16_s", };
pub const I64_LOAD16_U_OP         : Op = Op { tr: I64,  t1: I32,  t2: ___,  m: 2,  code: 0x33,  text: "i64.load16_u", };
pub const I64_LOAD32_S_OP         : Op = Op { tr: I64,  t1: I32,  t2: ___,  m: 4,  code: 0x34,  text: "i64.load32_s", };
pub const I64_LOAD32_U_OP         : Op = Op { tr: I64,  t1: I32,  t2: ___,  m: 4,  code: 0x35,  text: "i64.load32_u", };
pub const I32_STORE_OP            : Op = Op { tr: ___,  t1: I32,  t2: I32,  m: 4,  code: 0x36,  text: "i32.store", };
pub const I64_STORE_OP            : Op = Op { tr: ___,  t1: I32,  t2: I64,  m: 8,  code: 0x37,  text: "i64.store", };
pub const F32_STORE_OP            : Op = Op { tr: ___,  t1: I32,  t2: F32,  m: 4,  code: 0x38,  text: "f32.store", };
pub const F64_STORE_OP            : Op = Op { tr: ___,  t1: I32,  t2: F64,  m: 8,  code: 0x39,  text: "f64.store", };
pub const I32_STORE8_OP           : Op = Op { tr: ___,  t1: I32,  t2: I32,  m: 1,  code: 0x3a,  text: "i32.store8", };
pub const I32_STORE16_OP          : Op = Op { tr: ___,  t1: I32,  t2: I32,  m: 2,  code: 0x3b,  text: "i32.store16", };
pub const I64_STORE8_OP           : Op = Op { tr: ___,  t1: I32,  t2: I64,  m: 1,  code: 0x3c,  text: "i64.store8", };
pub const I64_STORE16_OP          : Op = Op { tr: ___,  t1: I32,  t2: I64,  m: 2,  code: 0x3d,  text: "i64.store16", };
pub const I64_STORE32_OP          : Op = Op { tr: ___,  t1: I32,  t2: I64,  m: 4,  code: 0x3e,  text: "i64.store32", };
pub const MEM_SIZE_OP             : Op = Op { tr: I32,  t1: ___,  t2: ___,  m: 0,  code: 0x3f,  text: "mem_size", };
pub const MEM_GROW_OP             : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 0,  code: 0x40,  text: "mem_grow", };
pub const I32_CONST_OP            : Op = Op { tr: I32,  t1: ___,  t2: ___,  m: 0,  code: 0x41,  text: "i32.const", };
pub const I64_CONST_OP            : Op = Op { tr: I64,  t1: ___,  t2: ___,  m: 0,  code: 0x42,  text: "i64.const", };
pub const F32_CONST_OP            : Op = Op { tr: F32,  t1: ___,  t2: ___,  m: 0,  code: 0x43,  text: "f32.const", };
pub const F64_CONST_OP            : Op = Op { tr: F64,  t1: ___,  t2: ___,  m: 0,  code: 0x44,  text: "f64.const", };
pub const I32_EQZ_OP              : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 0,  code: 0x45,  text: "i32.eqz", };
pub const I32_EQ_OP               : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x46,  text: "i32.eq", };
pub const I32_NE_OP               : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x47,  text: "i32.ne", };
pub const I32_LT_S_OP             : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x48,  text: "i32.lt_s", };
pub const I32_LT_U_OP             : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x49,  text: "i32.lt_u", };
pub const I32_GT_S_OP             : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x4a,  text: "i32.gt_s", };
pub const I32_GT_U_OP             : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x4b,  text: "i32.gt_u", };
pub const I32_LE_S_OP             : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x4c,  text: "i32.le_s", };
pub const I32_LE_U_OP             : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x4d,  text: "i32.le_u", };
pub const I32_GE_S_OP             : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x4e,  text: "i32.ge_s", };
pub const I32_GE_U_OP             : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x4f,  text: "i32.ge_u", };
pub const I64_EQZ_OP              : Op = Op { tr: I32,  t1: I64,  t2: ___,  m: 0,  code: 0x50,  text: "i64.eqz", };
pub const I64_EQ_OP               : Op = Op { tr: I32,  t1: I64,  t2: I64,  m: 0,  code: 0x51,  text: "i64.eq", };
pub const I64_NE_OP               : Op = Op { tr: I32,  t1: I64,  t2: I64,  m: 0,  code: 0x52,  text: "i64.ne", };
pub const I64_LT_S_OP             : Op = Op { tr: I32,  t1: I64,  t2: I64,  m: 0,  code: 0x53,  text: "i64.lt_s", };
pub const I64_LT_U_OP             : Op = Op { tr: I32,  t1: I64,  t2: I64,  m: 0,  code: 0x54,  text: "i64.lt_u", };
pub const I64_GT_S_OP             : Op = Op { tr: I32,  t1: I64,  t2: I64,  m: 0,  code: 0x55,  text: "i64.gt_s", };
pub const I64_GT_U_OP             : Op = Op { tr: I32,  t1: I64,  t2: I64,  m: 0,  code: 0x56,  text: "i64.gt_u", };
pub const I64_LE_S_OP             : Op = Op { tr: I32,  t1: I64,  t2: I64,  m: 0,  code: 0x57,  text: "i64.le_s", };
pub const I64_LE_U_OP             : Op = Op { tr: I32,  t1: I64,  t2: I64,  m: 0,  code: 0x58,  text: "i64.le_u", };
pub const I64_GE_S_OP             : Op = Op { tr: I32,  t1: I64,  t2: I64,  m: 0,  code: 0x59,  text: "i64.ge_s", };
pub const I64_GE_U_OP             : Op = Op { tr: I32,  t1: I64,  t2: I64,  m: 0,  code: 0x5a,  text: "i64.ge_u", };
pub const F32_EQ_OP               : Op = Op { tr: I32,  t1: F32,  t2: F32,  m: 0,  code: 0x5b,  text: "f32.eq", };
pub const F32_NE_OP               : Op = Op { tr: I32,  t1: F32,  t2: F32,  m: 0,  code: 0x5c,  text: "f32.ne", };
pub const F32_LT_OP               : Op = Op { tr: I32,  t1: F32,  t2: F32,  m: 0,  code: 0x5d,  text: "f32.lt", };
pub const F32_GT_OP               : Op = Op { tr: I32,  t1: F32,  t2: F32,  m: 0,  code: 0x5e,  text: "f32.gt", };
pub const F32_LE_OP               : Op = Op { tr: I32,  t1: F32,  t2: F32,  m: 0,  code: 0x5f,  text: "f32.le", };
pub const F32_GE_OP               : Op = Op { tr: I32,  t1: F32,  t2: F32,  m: 0,  code: 0x60,  text: "f32.ge", };
pub const F64_EQ_OP               : Op = Op { tr: I32,  t1: F64,  t2: F64,  m: 0,  code: 0x61,  text: "f64.eq", };
pub const F64_NE_OP               : Op = Op { tr: I32,  t1: F64,  t2: F64,  m: 0,  code: 0x62,  text: "f64.ne", };
pub const F64_LT_OP               : Op = Op { tr: I32,  t1: F64,  t2: F64,  m: 0,  code: 0x63,  text: "f64.lt", };
pub const F64_GT_OP               : Op = Op { tr: I32,  t1: F64,  t2: F64,  m: 0,  code: 0x64,  text: "f64.gt", };
pub const F64_LE_OP               : Op = Op { tr: I32,  t1: F64,  t2: F64,  m: 0,  code: 0x65,  text: "f64.le", };
pub const F64_GE_OP               : Op = Op { tr: I32,  t1: F64,  t2: F64,  m: 0,  code: 0x66,  text: "f64.ge", };
pub const I32_CLZ_OP              : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 0,  code: 0x67,  text: "i32.clz", };
pub const I32_CTZ_OP              : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 0,  code: 0x68,  text: "i32.ctz", };
pub const I32_POPCNT_OP           : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 0,  code: 0x69,  text: "i32.popcnt", };
pub const I32_ADD_OP              : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x6a,  text: "i32.add", };
pub const I32_SUB_OP              : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x6b,  text: "i32.sub", };
pub const I32_MUL_OP              : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x6c,  text: "i32.mul", };
pub const I32_DIV_S_OP            : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x6d,  text: "i32.div_s", };
pub const I32_DIV_U_OP            : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x6e,  text: "i32.div_u", };
pub const I32_REM_S_OP            : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x6f,  text: "i32.rem_s", };
pub const I32_REM_U_OP            : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x70,  text: "i32.rem_u", };
pub const I32_AND_OP              : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x71,  text: "i32.and", };
pub const I32_OR_OP               : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x72,  text: "i32.or", };
pub const I32_XOR_OP              : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x73,  text: "i32.xor", };
pub const I32_SHL_OP              : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x74,  text: "i32.shl", };
pub const I32_SHR_S_OP            : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x75,  text: "i32.shr_s", };
pub const I32_SHR_U_OP            : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x76,  text: "i32.shr_u", };
pub const I32_ROTL_OP             : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x77,  text: "i32.rotl", };
pub const I32_ROTR_OP             : Op = Op { tr: I32,  t1: I32,  t2: I32,  m: 0,  code: 0x78,  text: "i32.rotr", };
pub const I64_CLZ_OP              : Op = Op { tr: I64,  t1: I64,  t2: ___,  m: 0,  code: 0x79,  text: "i64.clz", };
pub const I64_CTZ_OP              : Op = Op { tr: I64,  t1: I64,  t2: ___,  m: 0,  code: 0x7a,  text: "i64.ctz", };
pub const I64_POPCNT_OP           : Op = Op { tr: I64,  t1: I64,  t2: ___,  m: 0,  code: 0x7b,  text: "i64.popcnt", };
pub const I64_ADD_OP              : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x7c,  text: "i64.add", };
pub const I64_SUB_OP              : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x7d,  text: "i64.sub", };
pub const I64_MUL_OP              : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x7e,  text: "i64.mul", };
pub const I64_DIV_S_OP            : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x7f,  text: "i64.div_s", };
pub const I64_DIV_U_OP            : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x80,  text: "i64.div_u", };
pub const I64_REM_S_OP            : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x81,  text: "i64.rem_s", };
pub const I64_REM_U_OP            : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x82,  text: "i64.rem_u", };
pub const I64_AND_OP              : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x83,  text: "i64.and", };
pub const I64_OR_OP               : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x84,  text: "i64.or", };
pub const I64_XOR_OP              : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x85,  text: "i64.xor", };
pub const I64_SHL_OP              : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x86,  text: "i64.shl", };
pub const I64_SHR_S_OP            : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x87,  text: "i64.shr_s", };
pub const I64_SHR_U_OP            : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x88,  text: "i64.shr_u", };
pub const I64_ROTL_OP             : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x89,  text: "i64.rotl", };
pub const I64_ROTR_OP             : Op = Op { tr: I64,  t1: I64,  t2: I64,  m: 0,  code: 0x8a,  text: "i64.rotr", };
pub const F32_ABS_OP              : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x8b,  text: "f32.abs", };
pub const F32_NEG_OP              : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x8c,  text: "f32.neg", };
pub const F32_CEIL_OP             : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x8d,  text: "f32.ceil", };
pub const F32_FLOOR_OP            : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x8e,  text: "f32.floor", };
pub const F32_TRUNC_OP            : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x8f,  text: "f32.trunc", };
pub const F32_NEAREST_OP          : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x90,  text: "f32.nearest", };
pub const F32_SQRT_OP             : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x91,  text: "f32.sqrt", };
pub const F32_ADD_OP              : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x92,  text: "f32.add", };
pub const F32_SUB_OP              : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x93,  text: "f32.sub", };
pub const F32_MUL_OP              : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x94,  text: "f32.mul", };
pub const F32_DIV_OP              : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x95,  text: "f32.div", };
pub const F32_MIN_OP              : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x96,  text: "f32.min", };
pub const F32_MAX_OP              : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x97,  text: "f32.max", };
pub const F32_COPYSIGN_OP         : Op = Op { tr: F32,  t1: F32,  t2: F32,  m: 0,  code: 0x98,  text: "f32.copysign", };
pub const F64_ABS_OP              : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0x99,  text: "f64.abs", };
pub const F64_NEG_OP              : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0x9a,  text: "f64.neg", };
pub const F64_CEIL_OP             : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0x9b,  text: "f64.ceil", };
pub const F64_FLOOR_OP            : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0x9c,  text: "f64.floor", };
pub const F64_TRUNC_OP            : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0x9d,  text: "f64.trunc", };
pub const F64_NEAREST_OP          : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0x9e,  text: "f64.nearest", };
pub const F64_SQRT_OP             : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0x9f,  text: "f64.sqrt", };
pub const F64_ADD_OP              : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0xa0,  text: "f64.add", };
pub const F64_SUB_OP              : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0xa1,  text: "f64.sub", };
pub const F64_MUL_OP              : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0xa2,  text: "f64.mul", };
pub const F64_DIV_OP              : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0xa3,  text: "f64.div", };
pub const F64_MIN_OP              : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0xa4,  text: "f64.min", };
pub const F64_MAX_OP              : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0xa5,  text: "f64.max", };
pub const F64_COPYSIGN_OP         : Op = Op { tr: F64,  t1: F64,  t2: F64,  m: 0,  code: 0xa6,  text: "f64.copysign", };
pub const I32_WRAP_I64_OP         : Op = Op { tr: I32,  t1: I64,  t2: ___,  m: 0,  code: 0xa7,  text: "i32.wrap/i64", };
pub const I32_TRUNC_S_F32_OP      : Op = Op { tr: I32,  t1: F32,  t2: ___,  m: 0,  code: 0xa8,  text: "i32.trunc_s/f32", };
pub const I32_TRUNC_U_F32_OP      : Op = Op { tr: I32,  t1: F32,  t2: ___,  m: 0,  code: 0xa9,  text: "i32.trunc_u/f32", };
pub const I32_TRUNC_S_F64_OP      : Op = Op { tr: I32,  t1: F64,  t2: ___,  m: 0,  code: 0xaa,  text: "i32.trunc_s/f64", };
pub const I32_TRUNC_U_F64_OP      : Op = Op { tr: I32,  t1: F64,  t2: ___,  m: 0,  code: 0xab,  text: "i32.trunc_u/f64", };
pub const I64_EXTEND_S_I32_OP     : Op = Op { tr: I64,  t1: I32,  t2: ___,  m: 0,  code: 0xac,  text: "i64.extend_s/i32", };
pub const I64_EXTEND_U_I32_OP     : Op = Op { tr: I64,  t1: I32,  t2: ___,  m: 0,  code: 0xad,  text: "i64.extend_u/i32", };
pub const I64_TRUNC_S_F32_OP      : Op = Op { tr: I64,  t1: F32,  t2: ___,  m: 0,  code: 0xae,  text: "i64.trunc_s/f32", };
pub const I64_TRUNC_U_F32_OP      : Op = Op { tr: I64,  t1: F32,  t2: ___,  m: 0,  code: 0xaf,  text: "i64.trunc_u/f32", };
pub const I64_TRUNC_S_F64_OP      : Op = Op { tr: I64,  t1: F64,  t2: ___,  m: 0,  code: 0xb0,  text: "i64.trunc_s/f64", };
pub const I64_TRUNC_U_F64_OP      : Op = Op { tr: I64,  t1: F64,  t2: ___,  m: 0,  code: 0xb1,  text: "i64.trunc_u/f64", };
pub const F32_CONVERT_S_I32_OP    : Op = Op { tr: F32,  t1: I32,  t2: ___,  m: 0,  code: 0xb2,  text: "f32.convert_s/i32", };
pub const F32_CONVERT_U_I32_OP    : Op = Op { tr: F32,  t1: I32,  t2: ___,  m: 0,  code: 0xb3,  text: "f32.convert_u/i32", };
pub const F32_CONVERT_S_I64_OP    : Op = Op { tr: F32,  t1: I64,  t2: ___,  m: 0,  code: 0xb4,  text: "f32.convert_s/i64", };
pub const F32_CONVERT_U_I64_OP    : Op = Op { tr: F32,  t1: I64,  t2: ___,  m: 0,  code: 0xb5,  text: "f32.convert_u/i64", };
pub const F32_DEMOTE_F64_OP       : Op = Op { tr: F32,  t1: F64,  t2: ___,  m: 0,  code: 0xb6,  text: "f32.demote/f64", };
pub const F64_CONVERT_S_I32_OP    : Op = Op { tr: F64,  t1: I32,  t2: ___,  m: 0,  code: 0xb7,  text: "f64.convert_s/i32", };
pub const F64_CONVERT_U_I32_OP    : Op = Op { tr: F64,  t1: I32,  t2: ___,  m: 0,  code: 0xb8,  text: "f64.convert_u/i32", };
pub const F64_CONVERT_S_I64_OP    : Op = Op { tr: F64,  t1: I64,  t2: ___,  m: 0,  code: 0xb9,  text: "f64.convert_s/i64", };
pub const F64_CONVERT_U_I64_OP    : Op = Op { tr: F64,  t1: I64,  t2: ___,  m: 0,  code: 0xba,  text: "f64.convert_u/i64", };
pub const F64_PROMOTE_F32_OP      : Op = Op { tr: F64,  t1: F32,  t2: ___,  m: 0,  code: 0xbb,  text: "f64.promote/f32", };
pub const I32_REINTERPRET_F32_OP  : Op = Op { tr: I32,  t1: F32,  t2: ___,  m: 0,  code: 0xbc,  text: "i32.reinterpret/f32", };
pub const I64_REINTERPRET_F64_OP  : Op = Op { tr: I64,  t1: F64,  t2: ___,  m: 0,  code: 0xbd,  text: "i64.reinterpret/f64", };
pub const F32_REINTERPRET_I32_OP  : Op = Op { tr: F32,  t1: I32,  t2: ___,  m: 0,  code: 0xbe,  text: "f32.reinterpret/i32", };
pub const F64_REINTERPRET_I64_OP  : Op = Op { tr: F64,  t1: I64,  t2: ___,  m: 0,  code: 0xbf,  text: "f64.reinterpret/i64", };
pub const I32_EXTEND8_S_OP        : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 0,  code: 0xC0,  text: "i32.extend8_s", };
pub const I32_EXTEND16_S_OP       : Op = Op { tr: I32,  t1: I32,  t2: ___,  m: 0,  code: 0xC1,  text: "i32.extend16_s", };
pub const I64_EXTEND8_S_OP        : Op = Op { tr: I64,  t1: I64,  t2: ___,  m: 0,  code: 0xC2,  text: "i64.extend8_s", };
pub const I64_EXTEND16_S_OP       : Op = Op { tr: I64,  t1: I64,  t2: ___,  m: 0,  code: 0xC3,  text: "i64.extend16_s", };
pub const I64_EXTEND32_S_OP       : Op = Op { tr: I64,  t1: I64,  t2: ___,  m: 0,  code: 0xC4,  text: "i64.extend32_s", };
pub const ALLOCA_OP               : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0xe0,  text: "alloca", };
pub const BR_UNLESS_OP            : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0xe1,  text: "br_unless", };
pub const CALL_HOST_OP            : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0xe2,  text: "call_host", };
pub const DATA_OP                 : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0xe3,  text: "data", };
pub const DROP_KEEP_OP            : Op = Op { tr: ___,  t1: ___,  t2: ___,  m: 0,  code: 0xe4,  text: "drop_keep", };

impl Op {
    pub fn from_opcode(opc: u8) -> Option<Op> {
        Some(match opc {
            UNREACHABLE          => UNREACHABLE_OP,
            NOP                  => NOP_OP,
            BLOCK                => BLOCK_OP,
            LOOP                 => LOOP_OP,
            IF                   => IF_OP,
            ELSE                 => ELSE_OP,
            TRY                  => TRY_OP,
            CATCH                => CATCH_OP,
            THROW                => THROW_OP,
            RETHROW              => RETHROW_OP,
            CATCH_ALL            => CATCH_ALL_OP,
            END                  => END_OP,
            BR                   => BR_OP,
            BR_IF                => BR_IF_OP,
            BR_TABLE             => BR_TABLE_OP,
            RETURN               => RETURN_OP,
            CALL                 => CALL_OP,
            CALL_INDIRECT        => CALL_INDIRECT_OP,
            DROP                 => DROP_OP,
            SELECT               => SELECT_OP,
            GET_LOCAL            => GET_LOCAL_OP,
            SET_LOCAL            => SET_LOCAL_OP,
            TEE_LOCAL            => TEE_LOCAL_OP,
            GET_GLOBAL           => GET_GLOBAL_OP,
            SET_GLOBAL           => SET_GLOBAL_OP,
            I32_LOAD             => I32_LOAD_OP,
            I64_LOAD             => I64_LOAD_OP,
            F32_LOAD             => F32_LOAD_OP,
            F64_LOAD             => F64_LOAD_OP,
            I32_LOAD8_S          => I32_LOAD8_S_OP,
            I32_LOAD8_U          => I32_LOAD8_U_OP,
            I32_LOAD16_S         => I32_LOAD16_S_OP,
            I32_LOAD16_U         => I32_LOAD16_U_OP,
            I64_LOAD8_S          => I64_LOAD8_S_OP,
            I64_LOAD8_U          => I64_LOAD8_U_OP,
            I64_LOAD16_S         => I64_LOAD16_S_OP,
            I64_LOAD16_U         => I64_LOAD16_U_OP,
            I64_LOAD32_S         => I64_LOAD32_S_OP,
            I64_LOAD32_U         => I64_LOAD32_U_OP,
            I32_STORE            => I32_STORE_OP,
            I64_STORE            => I64_STORE_OP,
            F32_STORE            => F32_STORE_OP,
            F64_STORE            => F64_STORE_OP,
            I32_STORE8           => I32_STORE8_OP,
            I32_STORE16          => I32_STORE16_OP,
            I64_STORE8           => I64_STORE8_OP,
            I64_STORE16          => I64_STORE16_OP,
            I64_STORE32          => I64_STORE32_OP,
            MEM_SIZE             => MEM_SIZE_OP,
            MEM_GROW             => MEM_GROW_OP,
            I32_CONST            => I32_CONST_OP,
            I64_CONST            => I64_CONST_OP,
            F32_CONST            => F32_CONST_OP,
            F64_CONST            => F64_CONST_OP,
            I32_EQZ              => I32_EQZ_OP,
            I32_EQ               => I32_EQ_OP,
            I32_NE               => I32_NE_OP,
            I32_LT_S             => I32_LT_S_OP,
            I32_LT_U             => I32_LT_U_OP,
            I32_GT_S             => I32_GT_S_OP,
            I32_GT_U             => I32_GT_U_OP,
            I32_LE_S             => I32_LE_S_OP,
            I32_LE_U             => I32_LE_U_OP,
            I32_GE_S             => I32_GE_S_OP,
            I32_GE_U             => I32_GE_U_OP,
            I64_EQZ              => I64_EQZ_OP,
            I64_EQ               => I64_EQ_OP,
            I64_NE               => I64_NE_OP,
            I64_LT_S             => I64_LT_S_OP,
            I64_LT_U             => I64_LT_U_OP,
            I64_GT_S             => I64_GT_S_OP,
            I64_GT_U             => I64_GT_U_OP,
            I64_LE_S             => I64_LE_S_OP,
            I64_LE_U             => I64_LE_U_OP,
            I64_GE_S             => I64_GE_S_OP,
            I64_GE_U             => I64_GE_U_OP,
            F32_EQ               => F32_EQ_OP,
            F32_NE               => F32_NE_OP,
            F32_LT               => F32_LT_OP,
            F32_GT               => F32_GT_OP,
            F32_LE               => F32_LE_OP,
            F32_GE               => F32_GE_OP,
            F64_EQ               => F64_EQ_OP,
            F64_NE               => F64_NE_OP,
            F64_LT               => F64_LT_OP,
            F64_GT               => F64_GT_OP,
            F64_LE               => F64_LE_OP,
            F64_GE               => F64_GE_OP,
            I32_CLZ              => I32_CLZ_OP,
            I32_CTZ              => I32_CTZ_OP,
            I32_POPCNT           => I32_POPCNT_OP,
            I32_ADD              => I32_ADD_OP,
            I32_SUB              => I32_SUB_OP,
            I32_MUL              => I32_MUL_OP,
            I32_DIV_S            => I32_DIV_S_OP,
            I32_DIV_U            => I32_DIV_U_OP,
            I32_REM_S            => I32_REM_S_OP,
            I32_REM_U            => I32_REM_U_OP,
            I32_AND              => I32_AND_OP,
            I32_OR               => I32_OR_OP,
            I32_XOR              => I32_XOR_OP,
            I32_SHL              => I32_SHL_OP,
            I32_SHR_S            => I32_SHR_S_OP,
            I32_SHR_U            => I32_SHR_U_OP,
            I32_ROTL             => I32_ROTL_OP,
            I32_ROTR             => I32_ROTR_OP,
            I64_CLZ              => I64_CLZ_OP,
            I64_CTZ              => I64_CTZ_OP,
            I64_POPCNT           => I64_POPCNT_OP,
            I64_ADD              => I64_ADD_OP,
            I64_SUB              => I64_SUB_OP,
            I64_MUL              => I64_MUL_OP,
            I64_DIV_S            => I64_DIV_S_OP,
            I64_DIV_U            => I64_DIV_U_OP,
            I64_REM_S            => I64_REM_S_OP,
            I64_REM_U            => I64_REM_U_OP,
            I64_AND              => I64_AND_OP,
            I64_OR               => I64_OR_OP,
            I64_XOR              => I64_XOR_OP,
            I64_SHL              => I64_SHL_OP,
            I64_SHR_S            => I64_SHR_S_OP,
            I64_SHR_U            => I64_SHR_U_OP,
            I64_ROTL             => I64_ROTL_OP,
            I64_ROTR             => I64_ROTR_OP,
            F32_ABS              => F32_ABS_OP,
            F32_NEG              => F32_NEG_OP,
            F32_CEIL             => F32_CEIL_OP,
            F32_FLOOR            => F32_FLOOR_OP,
            F32_TRUNC            => F32_TRUNC_OP,
            F32_NEAREST          => F32_NEAREST_OP,
            F32_SQRT             => F32_SQRT_OP,
            F32_ADD              => F32_ADD_OP,
            F32_SUB              => F32_SUB_OP,
            F32_MUL              => F32_MUL_OP,
            F32_DIV              => F32_DIV_OP,
            F32_MIN              => F32_MIN_OP,
            F32_MAX              => F32_MAX_OP,
            F32_COPYSIGN         => F32_COPYSIGN_OP,
            F64_ABS              => F64_ABS_OP,
            F64_NEG              => F64_NEG_OP,
            F64_CEIL             => F64_CEIL_OP,
            F64_FLOOR            => F64_FLOOR_OP,
            F64_TRUNC            => F64_TRUNC_OP,
            F64_NEAREST          => F64_NEAREST_OP,
            F64_SQRT             => F64_SQRT_OP,
            F64_ADD              => F64_ADD_OP,
            F64_SUB              => F64_SUB_OP,
            F64_MUL              => F64_MUL_OP,
            F64_DIV              => F64_DIV_OP,
            F64_MIN              => F64_MIN_OP,
            F64_MAX              => F64_MAX_OP,
            F64_COPYSIGN         => F64_COPYSIGN_OP,
            I32_WRAP_I64         => I32_WRAP_I64_OP,
            I32_TRUNC_S_F32      => I32_TRUNC_S_F32_OP,
            I32_TRUNC_U_F32      => I32_TRUNC_U_F32_OP,
            I32_TRUNC_S_F64      => I32_TRUNC_S_F64_OP,
            I32_TRUNC_U_F64      => I32_TRUNC_U_F64_OP,
            I64_EXTEND_S_I32     => I64_EXTEND_S_I32_OP,
            I64_EXTEND_U_I32     => I64_EXTEND_U_I32_OP,
            I64_TRUNC_S_F32      => I64_TRUNC_S_F32_OP,
            I64_TRUNC_U_F32      => I64_TRUNC_U_F32_OP,
            I64_TRUNC_S_F64      => I64_TRUNC_S_F64_OP,
            I64_TRUNC_U_F64      => I64_TRUNC_U_F64_OP,
            F32_CONVERT_S_I32    => F32_CONVERT_S_I32_OP,
            F32_CONVERT_U_I32    => F32_CONVERT_U_I32_OP,
            F32_CONVERT_S_I64    => F32_CONVERT_S_I64_OP,
            F32_CONVERT_U_I64    => F32_CONVERT_U_I64_OP,
            F32_DEMOTE_F64       => F32_DEMOTE_F64_OP,
            F64_CONVERT_S_I32    => F64_CONVERT_S_I32_OP,
            F64_CONVERT_U_I32    => F64_CONVERT_U_I32_OP,
            F64_CONVERT_S_I64    => F64_CONVERT_S_I64_OP,
            F64_CONVERT_U_I64    => F64_CONVERT_U_I64_OP,
            F64_PROMOTE_F32      => F64_PROMOTE_F32_OP,
            I32_REINTERPRET_F32  => I32_REINTERPRET_F32_OP,
            I64_REINTERPRET_F64  => I64_REINTERPRET_F64_OP,
            F32_REINTERPRET_I32  => F32_REINTERPRET_I32_OP,
            F64_REINTERPRET_I64  => F64_REINTERPRET_I64_OP,
            I32_EXTEND8_S        => I32_EXTEND8_S_OP,
            I32_EXTEND16_S       => I32_EXTEND16_S_OP,
            I64_EXTEND8_S        => I64_EXTEND8_S_OP,
            I64_EXTEND16_S       => I64_EXTEND16_S_OP,
            I64_EXTEND32_S       => I64_EXTEND32_S_OP,
            ALLOCA               => ALLOCA_OP,
            BR_UNLESS            => BR_UNLESS_OP,
            CALL_HOST            => CALL_HOST_OP,
            DATA                 => DATA_OP,
            DROP_KEEP            => DROP_KEEP_OP,
            _                    => return None,
        })
    }
}
