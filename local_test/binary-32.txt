;;; TOOL: run-interp
(module
  ;; i32
  (func (export "i32_add") (result i32)
    i32.const 1
    i32.const 2 
    i32.add)
  (func (export "i32_sub") (result i32) 
    i32.const 20
    i32.const 4
    i32.sub)
  (func (export "i32_mul") (result i32)
    i32.const 3
    i32.const 7
    i32.mul)
  (func (export "i32_div_s") (result i32)
    i32.const -4
    i32.const 2 
    i32.div_s)
  (func (export "i32_div_u") (result i32) 
    i32.const -4
    i32.const 2
    i32.div_u)
  (func (export "i32_rem_s") (result i32) 
    i32.const -5
    i32.const 2
    i32.rem_s)
  (func (export "i32_rem_u") (result i32)
    i32.const -5
    i32.const 2 
    i32.rem_u)
  (func (export "i32_and") (result i32)
    i32.const 11
    i32.const 5 
    i32.and)
  (func (export "i32_or") (result i32)
    i32.const 11
    i32.const 5 
    i32.or)
  (func (export "i32_xor") (result i32)
    i32.const 11
    i32.const 5 
    i32.xor)
  (func (export "i32_shl") (result i32)
    i32.const -100
    i32.const 3 
    i32.shl)
  (func (export "i32_shr_u") (result i32)
    i32.const -100
    i32.const 3 
    i32.shr_u)
  (func (export "i32_shr_s") (result i32)
    i32.const -100
    i32.const 3 
    i32.shr_s)
  (func (export "i32_rotl") (result i32)
    i32.const -100
    i32.const 3 
    i32.rotl)
  (func (export "i32_rotr") (result i32)
    i32.const -100 
    i32.const 3
    i32.rotr)
)
(;; STDOUT ;;;
i32_add() => i32:3
i32_sub() => i32:16
i32_mul() => i32:21
i32_div_s() => i32:4294967294
i32_div_u() => i32:2147483646
i32_rem_s() => i32:4294967295
i32_rem_u() => i32:1
i32_and() => i32:1
i32_or() => i32:15
i32_xor() => i32:14
i32_shl() => i32:4294966496
i32_shr_u() => i32:536870899
i32_shr_s() => i32:4294967283
i32_rotl() => i32:4294966503
i32_rotr() => i32:2684354547
;;; STDOUT ;;)
